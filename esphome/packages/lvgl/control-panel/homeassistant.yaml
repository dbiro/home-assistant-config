esphome: {}  # supress VS Code syntax warning

#-------------------------------------------
# Home Assistant - Gas Boiler Sensors
#-------------------------------------------
time:
  - platform: homeassistant
    id: ha_time
    on_time:
      - seconds: 0
        minutes: "*"
        then:
          - logger.log: "HA ON_TIME"
          - lvgl.label.update:
              id: lbl_time
              text: !lambda return id(ha_time).now().strftime("%H:%M");
    on_time_sync:
      then:
        - logger.log: "HA ON_TIME_SYNC"
        - lvgl.label.update:
              id: lbl_time
              text: !lambda return id(ha_time).now().strftime("%H:%M");

binary_sensor:
  - platform: homeassistant
    id: ha_garage_door_opening_sensor
    entity_id: binary_sensor.pico_w_1_garage_door_opening
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: btn_garage_door_state
          state:
            checked: !lambda return x;

  - platform: homeassistant
    id: ha_sliding_gate_opening_sensor
    entity_id: binary_sensor.pico_w_1_sliding_gate_opening
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: btn_sliding_gate_state
          state:
            checked: !lambda return x;

  - platform: homeassistant
    id: ha_garage_door_openings_sensor
    entity_id: binary_sensor.garage_door_openings
    publish_initial_state: true
    on_state:
      then:
        lvgl.widget.update:
          id: btn_door_gate_state
          state:
            checked: !lambda return x;

  - platform: template
    id: keep_display_on
    internal: true
    lambda: |-
      return
        str_endswith(id(ha_gas_boiler_thermostat_hvac_action_sensor).state.c_str(), "ing") or
        str_endswith(id(ha_livingroom_panasonic_ac_livingroom_panasonic_ac_hvac_action_sensor).state.c_str(), "ing") or
        str_endswith(id(ha_bedroom_panasonic_ac_bedroom_panasonic_ac_hvac_action_sensor).state.c_str(), "ing") or
        id(ha_garage_door_opening_sensor).state or
        id(ha_sliding_gate_opening_sensor).state;
    on_state:
      then:
        if:
          condition:
            lambda: |-
              return x;
          then:
            - logger.log: "Display should keep on: resuming LVGL"
            - script.execute: lvgl_resume
          else:
            - if:
                condition: 
                  lvgl.is_idle:
                    timeout: ${lvgl_idle_timeout}
                then:
                  - logger.log: "Display should turn off: pausing LVGL"
                  - script.execute: lvgl_pause
                else:
                  - logger.log: Display should still keep on. LVG idle timeout ${lvgl_idle_timeout} not reached.